name: Production Release

on:
  push:
    tags:
      - "release-production-*"
env:
  ENVIRONMENT: prod
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
  SSH_SERVER_IP: ${{ secrets.PRODUCTION_SSH_SERVER_IP }}
  SSH_USERNAME: ${{ secrets.PRODUCTION_SSH_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Create .env file from GitHub secrets
        run: |
            echo '${{ vars.ENV_PRODUCTION }}' > .env

      - name: Docker login
        run: echo "${DOCKER_TOKEN}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

      - name: Build and push
        id: build
        run: |
            export CHART_REGEX="^\([a-z0-9-]\+\)-\([0-9]\+.[0-9]\+.[0-9]\+\(-\(alpha\|beta\|rc\|patch\).[0-9]\+\)\?\)$"
            export GITTAG=$(echo "${{ steps.extract_branch.outputs.branch }}" | awk -F'/' '{print $3}')
            export GITTAGVERSION=$(echo "$GITTAG" | sed -n "s/${CHART_REGEX}/\2/p")
            export NEW_VERSION="v$GITTAGVERSION-${ENVIRONMENT}"
            echo "building image..."
            docker build --build-arg="MODULE_ACCESS_TOKEN=${GITHUB_TOKEN}" --build-arg="COMMIT_HASH=${GITHUB_SHA}" --build-arg="RELEASE_TAG=${GITTAG}"  -t ${DOCKER_USERNAME}/private:ecommerce-fe-$NEW_VERSION .
            echo "pushing image..."
            docker push ${DOCKER_USERNAME}/private:ecommerce-fe-$NEW_VERSION
            echo "tag current docker image to latest"
            docker tag ${DOCKER_USERNAME}/private:ecommerce-fe-$NEW_VERSION ${DOCKER_USERNAME}/private:ecommerce-fe-latest-${ENVIRONMENT}
            echo "pushing latest image"
            docker push ${DOCKER_USERNAME}/private:ecommerce-fe-latest-${ENVIRONMENT}
  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Store SSH private key
        run: |
            mkdir -p ~/.ssh
            echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
      - name: Install expect
        run: |
            sudo apt update && sudo apt install -y expect
      - name: Initiate ssh knows host
        run: |
            expect -c "                             
            set username $::env(SSH_USERNAME)
            set server_ip $::env(SSH_SERVER_IP)
            spawn ssh \$username@\$server_ip echo \"Successful initiate ssh known host\"
            expect {
                \"*Are you sure you want to continue connecting*\" {
                send \"yes\r\"
                exp_continue
                }
            }
            "
      - name: Docker login
        run: |
            echo "${DOCKER_TOKEN}" | ssh $SSH_USERNAME@$SSH_SERVER_IP "docker login -u ${DOCKER_USERNAME} --password-stdin"
      - name: Deploy
        run: |
            echo "down balisunt_fe"
            ssh $SSH_USERNAME@$SSH_SERVER_IP "docker compose -f /home/repo_dequa_net/deployment/app/production/frontend/docker-compose.yml down"
            echo "remove old image"
            ssh $SSH_USERNAME@$SSH_SERVER_IP "docker image rm -f ${DOCKER_USERNAME}/private:ecommerce-fe-latest-${ENVIRONMENT}"
            echo "pull latest image and run"
            ssh $SSH_USERNAME@$SSH_SERVER_IP "docker compose -f /home/repo_dequa_net/deployment/app/production/frontend/docker-compose.yml up -d"
            echo "deploy success..."

